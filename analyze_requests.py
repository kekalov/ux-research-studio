"""
Analyze Requests - –∞–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import json
from pathlib import Path

def analyze_requests_count():
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
    reports_dir = Path('reports')
    json_files = list(reports_dir.glob('ux_report_enhanced_demo_*.json'))
    
    if not json_files:
        print("‚ùå –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    latest_file = max(json_files, key=lambda x: x.stat().st_mtime)
    print(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {latest_file.name}")
    
    with open(latest_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    steps = data.get('steps', [])
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    request_types = {
        'page_loads': 0,      # –ó–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        'searches': 0,        # –ü–æ–∏—Å–∫–∏
        'filters': 0,         # –§–∏–ª—å—Ç—Ä—ã
        'clicks': 0,          # –ö–ª–∏–∫–∏
        'ai_requests': 0,     # AI –∑–∞–ø—Ä–æ—Å—ã
        'total_actions': len(steps)
    }
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
    for step in steps:
        action = step.get('action', '')
        
        if 'page_load' in action or 'load' in action:
            request_types['page_loads'] += 1
        elif 'search' in action:
            request_types['searches'] += 1
        elif 'filter' in action:
            request_types['filters'] += 1
        elif 'click' in action:
            request_types['clicks'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –∑–∞–ø—Ä–æ—Å—ã
    if 'analysis' in data:
        request_types['ai_requests'] = 1  # –û–¥–∏–Ω AI –∞–Ω–∞–ª–∏–∑
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–†–û–°–û–í:")
    print(f"   –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {request_types['total_actions']}")
    print(f"   –ó–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {request_types['page_loads']}")
    print(f"   –ü–æ–∏—Å–∫–∏: {request_types['searches']}")
    print(f"   –§–∏–ª—å—Ç—Ä—ã: {request_types['filters']}")
    print(f"   –ö–ª–∏–∫–∏: {request_types['clicks']}")
    print(f"   AI –∑–∞–ø—Ä–æ—Å—ã: {request_types['ai_requests']}")
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º
    print(f"\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –®–ê–ì–ê–ú:")
    for i, step in enumerate(steps, 1):
        action = step.get('action', '')
        success = step.get('success', False)
        duration = step.get('duration', 0)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"   {i:2d}. {status} {action} ({duration:.1f}—Å)")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å AI)
    if request_types['ai_requests'] > 0:
        print(f"\nüí∞ –†–ê–°–•–û–î–´ –ù–ê AI:")
        print(f"   OpenAI –∑–∞–ø—Ä–æ—Å—ã: {request_types['ai_requests']}")
        print(f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~$0.01-0.05 –∑–∞ –∑–∞–ø—Ä–æ—Å")
        print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${request_types['ai_requests'] * 0.03:.2f}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    
    if request_types['page_loads'] > 3:
        print(f"   ‚ö° –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü")
    
    if request_types['searches'] > 2:
        print(f"   üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    
    if request_types['filters'] > 5:
        print(f"   üéõÔ∏è  –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å")
    
    if request_types['ai_requests'] > 1:
        print(f"   ü§ñ –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    return request_types

def compare_with_real_user():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    print(f"\nüë§ –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú:")
    print("=" * 50)
    
    print(f"üìä –¢–ò–ü–ò–ß–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
    print(f"   - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: 1 —Ä–∞–∑")
    print(f"   - –ò—â–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 1-2 —Ä–∞–∑–∞")
    print(f"   - –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã: 2-4 —Ä–∞–∑–∞")
    print(f"   - –ö–ª–∏–∫–∞–µ—Ç –ø–æ –æ—Ç–µ–ª—è–º: 3-5 —Ä–∞–∑")
    print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è: 2-5 –º–∏–Ω—É—Ç")
    
    print(f"\nü§ñ –ù–ê–® –ê–ì–ï–ù–¢:")
    print(f"   - –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print(f"   - –î–µ–ª–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞")
    print(f"   - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print(f"   - –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç")
    print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è: ~1-2 –º–∏–Ω—É—Ç—ã")

def estimate_real_usage():
    """–û—Ü–µ–Ω–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    print(f"\nüéØ –û–¶–ï–ù–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
    print("=" * 50)
    
    scenarios = {
        'quick_test': {
            'description': '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (1 —Å—Ü–µ–Ω–∞—Ä–∏–π)',
            'requests': 15,
            'ai_calls': 1,
            'time': '1-2 –º–∏–Ω',
            'cost': '$0.03'
        },
        'full_analysis': {
            'description': '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (3 —Å—Ü–µ–Ω–∞—Ä–∏—è)',
            'requests': 45,
            'ai_calls': 3,
            'time': '5-10 –º–∏–Ω',
            'cost': '$0.09'
        },
        'deep_research': {
            'description': '–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (5+ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)',
            'requests': 75,
            'ai_calls': 5,
            'time': '15-30 –º–∏–Ω',
            'cost': '$0.15'
        }
    }
    
    for scenario, data in scenarios.items():
        print(f"\nüìã {data['description'].upper()}:")
        print(f"   –ó–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–π—Ç—É: {data['requests']}")
        print(f"   AI –∑–∞–ø—Ä–æ—Å—ã: {data['ai_calls']}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data['time']}")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['cost']}")

if __name__ == "__main__":
    analyze_requests_count()
    compare_with_real_user()
    estimate_real_usage()
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üí° –ê–≥–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print(f"üí° –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞")
    print(f"üí° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ, —á–µ–º —É —á–µ–ª–æ–≤–µ–∫–∞")


