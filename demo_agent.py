#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è AI UX Research Agent –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import load_config
from agent.ai_analyzer import AIAnalyzer
from reports.report_generator import ReportGenerator

def demo_agent():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã AI –∞–≥–µ–Ω—Ç–∞ –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    print("üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI UX Research Agent")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    
    print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
    print(f"   - –ë–∞–∑–æ–≤—ã–π URL: {config['base_url']}")
    print(f"   - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {list(config['scenarios'].keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API
    if os.getenv('OPENAI_API_KEY'):
        print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑)")
    
    print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    demo_results = create_demo_results(config)
    
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    ai_analyzer = AIAnalyzer(config['ai'])
    
    print("\nü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞...")
    
    # AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    ai_analysis = ai_analyzer.analyze_results(demo_results)
    
    print("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    demo_results['analysis'] = ai_analysis
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    
    report_generator = ReportGenerator()
    report_path = report_generator.generate_report(demo_results, 'demo_scenario', 'reports')
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏
    print("\nüìà –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"   - –°—Ü–µ–Ω–∞—Ä–∏–π: {demo_results['scenario']}")
    print(f"   - –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {len(demo_results['steps'])}")
    print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: {len([s for s in demo_results['steps'] if s.get('success', False)])}")
    print(f"   - –û–±—â–∏–π –±–∞–ª–ª: {ai_analysis.get('overall_score', 'N/A')}/10")
    print(f"   - –†–µ–∑—é–º–µ: {ai_analysis.get('summary', 'N/A')}")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = ai_analysis.get('recommendations', [])
    if recommendations:
        print(f"\nüîß –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(recommendations[:3], 1):
            print(f"   {i}. {rec.get('description', 'N/A')}")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤: {report_path}")

def create_demo_results(config):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —à–∞–≥–∏
    demo_steps = [
        {
            'action': 'search_destination',
            'destination': '–°–æ—á–∏',
            'success': True,
            'timestamp': datetime.now().timestamp() - 30,
            'duration': 2.5
        },
        {
            'action': 'select_dates',
            'check_in': '2024-12-20',
            'check_out': '2024-12-27',
            'success': True,
            'timestamp': datetime.now().timestamp() - 25,
            'duration': 3.2
        },
        {
            'action': 'configure_guests',
            'guests': 2,
            'rooms': 1,
            'success': True,
            'timestamp': datetime.now().timestamp() - 20,
            'duration': 1.8
        },
        {
            'action': 'search_hotels',
            'success': True,
            'timestamp': datetime.now().timestamp() - 15,
            'duration': 4.5
        },
        {
            'action': 'analyze_search_results',
            'analysis': {
                'hotels_count': 45,
                'filters_available': ['–¶–µ–Ω–∞', '–ó–≤–µ–∑–¥—ã', '–£–¥–æ–±—Å—Ç–≤–∞', '–†–∞–π–æ–Ω'],
                'sorting_options': ['–ü–æ —Ü–µ–Ω–µ', '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É', '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏'],
                'hotel_cards': {
                    'total_cards': 45,
                    'cards_with_images': 42,
                    'cards_with_prices': 45,
                    'cards_with_ratings': 38,
                    'average_price': 8500
                },
                'pagination': {
                    'has_pagination': True,
                    'current_page': 1,
                    'total_pages': 3,
                    'next_page_available': True
                },
                'price_range': {
                    'min_price': 3500,
                    'max_price': 25000,
                    'price_distribution': {
                        '3500-7000': 15,
                        '7000-10500': 20,
                        '10500-14000': 8,
                        '14000-17500': 2
                    }
                }
            },
            'success': True,
            'timestamp': datetime.now().timestamp() - 10,
            'duration': 2.1
        },
        {
            'action': 'apply_price_filter',
            'success': True,
            'timestamp': datetime.now().timestamp() - 8,
            'duration': 1.5
        },
        {
            'action': 'apply_star_filter',
            'success': False,
            'error': '–≠–ª–µ–º–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            'timestamp': datetime.now().timestamp() - 6,
            'duration': 5.2
        }
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        'scenario': 'sochi_winter',
        'timestamp': datetime.now().timestamp(),
        'config': config['scenarios']['sochi_winter'],
        'steps': demo_steps,
        'analysis': {},
        'screenshots': []
    }
    
    return results

if __name__ == "__main__":
    demo_agent()


