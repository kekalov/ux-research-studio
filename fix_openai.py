"""
Fix OpenAI - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å OpenAI API
"""

import sys
import os
import subprocess

def check_python_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PYTHON –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"Python –ø—É—Ç—å: {sys.executable}")
    print(f"–ü—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π:")
    for path in sys.path:
        print(f"  - {path}")
    
    print(f"\n–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"PYTHONPATH: {os.getenv('PYTHONPATH', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    print(f"CONDA_DEFAULT_ENV: {os.getenv('CONDA_DEFAULT_ENV', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")

def check_openai_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ OpenAI"""
    
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–ö–ò OPENAI")
    print("=" * 50)
    
    try:
        import openai
        print(f"‚úÖ OpenAI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {openai.__version__}")
        print(f"–ü—É—Ç—å –∫ –º–æ–¥—É–ª—é: {openai.__file__}")
    except ImportError as e:
        print(f"‚ùå OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False
    
    return True

def check_openai_api_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ OpenAI"""
    
    print(f"\nüîë –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ê")
    print("=" * 50)
    
    api_key = os.getenv('OPENAI_API_KEY')
    if api_key:
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
        return True
    else:
        print(f"‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print(f"   export OPENAI_API_KEY='your-api-key-here'")
        return False

def install_openai_in_conda():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenAI –≤ conda –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    
    print(f"\nüì¶ –£–°–¢–ê–ù–û–í–ö–ê OPENAI –í CONDA")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ conda
        result = subprocess.run(['conda', 'install', 'openai', '-c', 'conda-forge', '-y'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ OpenAI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ conda")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ conda: {result.stderr}")
            
        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ pip –≤ conda
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', 'openai'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ OpenAI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pip")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ pip: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    return False

def test_openai_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ OpenAI"""
    
    print(f"\nüß™ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò OPENAI")
    print("=" * 50)
    
    try:
        import openai
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = openai.OpenAI(api_key=api_key)
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç OpenAI —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        print("‚úÖ OpenAI –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def create_demo_with_openai():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI"""
    
    print(f"\nü§ñ –î–ï–ú–û –° OPENAI")
    print("=" * 50)
    
    try:
        import openai
        
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        client = openai.OpenAI(api_key=api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
            ],
            max_tokens=50
        )
        
        print("‚úÖ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï OPENAI")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    check_python_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    openai_installed = check_openai_installation()
    
    if not openai_installed:
        print(f"\nüì¶ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú OPENAI...")
        install_openai_in_conda()
        check_openai_installation()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key_ok = check_openai_api_key()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    if openai_installed and api_key_ok:
        test_openai_functionality()
        create_demo_with_openai()
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    print(f"2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á: export OPENAI_API_KEY='your-key'")
    print(f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    print(f"4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ demo_agent_simple.py")

if __name__ == "__main__":
    main()


