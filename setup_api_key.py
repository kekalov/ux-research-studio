"""
Setup API Key - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ OpenAI
"""

import os
import json
from pathlib import Path

def setup_api_key():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ OpenAI"""
    
    print("üîë –ù–ê–°–¢–†–û–ô–ö–ê API –ö–õ–Æ–ß–ê OPENAI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
    existing_key = os.getenv('OPENAI_API_KEY')
    if existing_key:
        print(f"‚úÖ API –∫–ª—é—á —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {existing_key[:10]}...")
        return True
    
    print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print("\nüí° –í–ê–†–ò–ê–ù–¢–´ –£–°–¢–ê–ù–û–í–ö–ò:")
    print("1. –í—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)")
    print("2. –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª)")
    print("3. –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ").strip()
    
    if choice == "1":
        return setup_temporary_key()
    elif choice == "2":
        return setup_permanent_key()
    elif choice == "3":
        return setup_manual_key()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return False

def setup_temporary_key():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞"""
    
    print("\nüîë –í–†–ï–ú–ï–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê")
    print("–ö–ª—é—á –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞")
    
    api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á: ").strip()
    
    if not api_key:
        print("‚ùå –ö–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return False
    
    if not api_key.startswith('sk-'):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-')")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['OPENAI_API_KEY'] = api_key
    print(f"‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {api_key[:10]}...")
    print("üí° –ö–ª—é—á –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏")
    
    return True

def setup_permanent_key():
    """–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞"""
    
    print("\nüîë –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê")
    print("–ö–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª .env")
    
    api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á: ").strip()
    
    if not api_key:
        print("‚ùå –ö–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return False
    
    if not api_key.startswith('sk-'):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-')")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env
    env_file = Path('.env')
    env_content = f"OPENAI_API_KEY={api_key}\n"
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª .env")
    print(f"üí° –§–∞–π–ª: {env_file.absolute()}")
    print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    return True

def setup_manual_key():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞"""
    
    print("\nüîë –†–£–ß–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
    print()
    print("–î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("export OPENAI_API_KEY='your-api-key-here'")
    print()
    print("–î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–¥–æ–±–∞–≤—å—Ç–µ –≤ ~/.zshrc –∏–ª–∏ ~/.bash_profile):")
    print("echo 'export OPENAI_API_KEY=\"your-api-key-here\"' >> ~/.zshrc")
    print("source ~/.zshrc")
    print()
    print("üí° –ó–∞–º–µ–Ω–∏—Ç–µ 'your-api-key-here' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á")
    
    return False

def test_api_key():
    """–¢–µ—Å—Ç API –∫–ª—é—á–∞"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ö–õ–Æ–ß–ê")
    print("=" * 50)
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        import openai
        
        client = openai.OpenAI(api_key=api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç API –∫–ª—é—á–∞."}
            ],
            max_tokens=30
        )
        
        print("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê OPENAI API –ö–õ–Æ–ß–ê")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª—é—á
    if setup_api_key():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á
        if test_api_key():
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI –≤ –∞–≥–µ–Ω—Ç–∞—Ö")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º")
    else:
        print("\nüí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç")

if __name__ == "__main__":
    main()


