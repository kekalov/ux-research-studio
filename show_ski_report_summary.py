"""
Show Ski Report Summary - –ø–æ–∫–∞–∑ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–∞
"""

import json
from pathlib import Path

def show_ski_report_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é"""
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
    reports_dir = Path('reports')
    ski_reports = list(reports_dir.glob('ski_research_report_*.json'))
    
    if not ski_reports:
        print("‚ùå –û—Ç—á–µ—Ç—ã –ø–æ –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω–æ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –æ—Ç—á–µ—Ç
    latest_report = max(ski_reports, key=lambda x: x.stat().st_mtime)
    
    print("üéø –û–¢–ß–ï–¢ –ü–û –ì–û–†–ù–û–õ–´–ñ–ù–û–ú–£ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Æ")
    print("=" * 60)
    print(f"üìÅ –§–∞–π–ª: {latest_report.name}")
    
    # –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç
    with open(latest_report, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    scenario = data.get('scenario', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    config = data.get('config', {})
    steps = data.get('steps', [])
    analysis = data.get('analysis', {})
    user_feedback = data.get('user_feedback', {})
    
    print(f"\nüìã –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"   –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
    print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {config.get('destination', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"   –î–∞—Ç—ã: {config.get('check_in', '')} - {config.get('check_out', '')}")
    print(f"   –ì–æ—Å—Ç–∏: {config.get('guests', 0)} —á–µ–ª–æ–≤–µ–∫–∞")
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
    requirements = config.get('requirements', {})
    print(f"\nüéØ –¢–†–ï–ë–û–í–ê–ù–ò–Ø:")
    print(f"   –ó–≤–µ–∑–¥—ã: {requirements.get('stars', '–õ—é–±—ã–µ')}")
    print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–¥—ä–µ–º–Ω–∏–∫–∞: {requirements.get('distance_to_lift', '–õ—é–±–æ–µ')}")
    print(f"   –û—Ç–º–µ–Ω–∞: {requirements.get('cancellation', '–õ—é–±–∞—è')}")
    print(f"   –¶–µ–Ω–∞: {requirements.get('price_limit', '–õ—é–±–∞—è')}")
    print(f"   –õ—ã–∂–µ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {'–î–∞' if requirements.get('ski_storage') else '–ù–µ—Ç'}")
    print(f"   –¢—Ä–∞–Ω—Å—Ñ–µ—Ä: {'–î–∞' if requirements.get('transfer_to_lift') else '–ù–µ—Ç'}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful_steps = [s for s in steps if s.get('success', False)]
    total_time = sum(s.get('duration', 0) for s in steps)
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {len(steps)}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: {len(successful_steps)}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {len(successful_steps)/len(steps)*100:.1f}%")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫")
    
    # AI –∞–Ω–∞–ª–∏–∑
    print(f"\nü§ñ AI –ê–ù–ê–õ–ò–ó:")
    print(f"   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {analysis.get('overall_score', 'N/A')}/10")
    print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {analysis.get('total_time', 0):.1f} —Å–µ–∫")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analysis.get('success_rate', 0):.1f}%")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —É–¥–æ–±—Å—Ç–≤–∞
    usability = analysis.get('usability_metrics', {})
    if usability:
        print(f"\nüìà –ú–ï–¢–†–ò–ö–ò –£–î–û–ë–°–¢–í–ê:")
        print(f"   –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {usability.get('ease_of_use', 'N/A')}/10")
        print(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {usability.get('efficiency', 'N/A')}/10")
        print(f"   –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {usability.get('satisfaction', 'N/A')}/10")
        print(f"   –û–±—É—á–∞–µ–º–æ—Å—Ç—å: {usability.get('learnability', 'N/A')}/10")
    
    # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
    key_findings = analysis.get('key_findings', [])
    if key_findings:
        print(f"\n‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
        for finding in key_findings:
            print(f"   ‚Ä¢ {finding}")
    
    # –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    issues = analysis.get('issues_identified', [])
    if issues:
        print(f"\n‚ö†Ô∏è  –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = analysis.get('recommendations', [])
    if recommendations:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in recommendations:
            priority_emoji = "üî¥" if rec.get('priority') == 'high' else "üü°" if rec.get('priority') == 'medium' else "üü¢"
            print(f"   {priority_emoji} {rec.get('description', '')}")
            print(f"      –í–ª–∏—è–Ω–∏–µ: {rec.get('impact', '')}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    for step in steps:
        if step.get('action') == 'analyze_ski_results':
            analysis_data = step.get('analysis', {})
            print(f"\nüè® –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û–ò–°–ö–ê:")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {analysis_data.get('hotels_count', 0)}")
            
            ski_facilities = analysis_data.get('ski_facilities', {})
            print(f"   –° –ª—ã–∂–µ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º: {ski_facilities.get('with_ski_storage', 0)}")
            print(f"   –° —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–º: {ski_facilities.get('with_transfer', 0)}")
            print(f"   Ski-in/ski-out: {ski_facilities.get('ski_in_ski_out', 0)}")
            print(f"   –° –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º: {ski_facilities.get('with_equipment', 0)}")
            
            distance = analysis_data.get('distance_analysis', {})
            print(f"   –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –∫–º: {distance.get('within_1km', 0)}")
            print(f"   –í –ø—Ä–µ–¥–µ–ª–∞—Ö 2 –∫–º: {distance.get('within_2km', 0)}")
            print(f"   –í –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –∫–º: {distance.get('within_5km', 0)}")
            
            cancellation = analysis_data.get('cancellation_policies', {})
            print(f"   –° –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –æ—Ç–º–µ–Ω–æ–π: {cancellation.get('free_cancellation', 0)}")
            print(f"   –° –≥–∏–±–∫–æ–π –æ—Ç–º–µ–Ω–æ–π: {cancellation.get('flexible', 0)}")
            print(f"   –° –∂–µ—Å—Ç–∫–æ–π –æ—Ç–º–µ–Ω–æ–π: {cancellation.get('strict', 0)}")
            break
    
    # –§–∏–¥–±—ç–∫ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    print(f"\nüë• –§–ò–î–ë–≠–ö –û–¢ –ü–ï–†–°–û–ù–ê–ñ–ï–ô:")
    for persona_key, feedback in user_feedback.items():
        persona = feedback.get('user_persona', {})
        rating = feedback.get('usability_score', {}).get('score', 0)
        print(f"   üë§ {persona.get('name', persona_key)}: {rating}/10")
    
    # –ö–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏
    print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –®–ê–ì–ò:")
    for step in steps:
        if any(keyword in step.get('action', '') for keyword in ['ski', 'lift', 'cancellation', 'price', 'star']):
            status = "‚úÖ" if step.get('success') else "‚ùå"
            print(f"   {status} {step.get('description', '')}")
    
    print(f"\nüìÅ –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢:")
    print(f"   HTML: reports/ux_report_{scenario}_*.html")
    print(f"   JSON: {latest_report.name}")
    print(f"   –ì—Ä–∞—Ñ–∏–∫–∏: reports/*_{scenario}_*.png")
    
    print(f"\nüéâ –°–í–û–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")

if __name__ == "__main__":
    show_ski_report_summary()


